---
export interface Props {
  personal: {
    id: string;
    title?: string;
    personal: string;
    contact: string;
    date_posted: string;
    categories: string[];
    locations: string[];
  };
  variant?: 'grid' | 'detail';
  showLinkIcon?: boolean;
  showRespondButton?: boolean;
  showShareButton?: boolean;
  isHighlighted?: boolean;
}

const { 
  personal, 
  variant = 'grid', 
  showLinkIcon = true, 
  showRespondButton = true,
  showShareButton = false,
  isHighlighted = false 
} = Astro.props;

function formatDate(dateStr: string) {
  const [year, month, day] = dateStr.split('-').map(Number);
  const date = new Date(year, month - 1, day);
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
}

function getHeadline(personal: any) {
  if (personal.title) return personal.title;
  const words = personal.personal.split(' ');
  return words.slice(0, 8).join(' ') + (words.length > 8 ? '...' : '');
}

const locationText = personal.locations.join(', ').toUpperCase();
const byline = [locationText, formatDate(personal.date_posted)].filter(Boolean).join(' â€¢ ');
const headline = getHeadline(personal);

// Different styling for detail vs grid variants
const isDetail = variant === 'detail';
const titleClass = isDetail 
  ? "font-serif text-4xl md:text-5xl font-bold text-gray-900 dark:text-gray-100 mb-6 leading-tight tracking-tight" 
  : "font-serif text-2xl md:text-3xl font-bold text-gray-900 dark:text-gray-100 mb-3 leading-tight tracking-tight";
const bodyClass = isDetail 
  ? "text-lg text-gray-800 dark:text-gray-200 leading-relaxed whitespace-pre-wrap font-sans mb-8" 
  : "text-base text-gray-800 dark:text-gray-200 leading-relaxed whitespace-pre-wrap font-sans";
const bylineClass = isDetail 
  ? "text-sm text-gray-700 dark:text-gray-300 tracking-wide uppercase font-mono mb-4" 
  : "text-xs text-gray-700 dark:text-gray-300 tracking-wide uppercase font-mono";
---

<article 
  id={personal.id}
  class={`personal-card ${isHighlighted ? 'highlight-personal' : ''}`}
>
  <div class="flex items-start justify-between mb-2">
    <span class={bylineClass}>{byline}</span>
    {showLinkIcon && variant === 'grid' && (
      <a
        href={`/personal/${personal.id.replace('personal-', '')}`}
        class="text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 transition-colors flex-shrink-0 ml-2"
        title="View details"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
        </svg>
      </a>
    )}
  </div>
  
  <h2 class={titleClass} style="font-family: 'Playfair Display', serif; text-transform: uppercase; letter-spacing: 0.02em;">
    {headline}
  </h2>
  
  <p class={bodyClass} style="font-family: 'Inter', system-ui, sans-serif;">
    {personal.personal}
  </p>
  
  {variant === 'grid' ? (
    <div class="personal-bottom-row">
      <div class="flex flex-wrap gap-2">
        {personal.categories.map((cat) => (
          <span class="personal-tag">{cat}</span>
        ))}
      </div>
      {showRespondButton && (
        <a
          href={personal.contact}
          target="_blank"
          rel="noopener noreferrer"
          class="personal-respond"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" />
          </svg>
          Respond
        </a>
      )}
    </div>
  ) : (
    <>
      <div class="mb-6">
        <div class="flex flex-wrap gap-2">
          {personal.categories.map((cat) => (
            <span class="personal-tag">{cat}</span>
          ))}
        </div>
      </div>
      <div class="flex flex-col sm:flex-row gap-3 justify-start">
        {showRespondButton && (
          <a
            href={personal.contact}
            target="_blank"
            rel="noopener noreferrer"
            class="personal-respond inline-flex items-center justify-center px-6 py-3 font-semibold rounded-lg transition-colors"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" />
            </svg>
            Respond
          </a>
        )}
        {showShareButton && (
          <button
            id="share-button"
            class="inline-flex items-center justify-center px-6 py-3 bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 font-semibold rounded-lg transition-colors border border-gray-200 dark:border-gray-600"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
            </svg>
            Share
          </button>
        )}
      </div>
    </>
  )}
</article>

{showShareButton && (
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const shareButton = document.getElementById('share-button');
      if (!shareButton) return;
      
      shareButton.addEventListener('click', function() {
        const url = window.location.href;
        const button = this;
        const originalText = button.innerHTML;
        const originalClasses = button.className;
        
        // Check if we're on mobile (has touch screen and native share API)
        const isMobile = 'ontouchstart' in window && navigator.share;
        
        if (isMobile) {
          // Use native share API on mobile devices
          navigator.share({
            title: 'Queer Jews Personal',
            text: 'Check out this personal ad on Queer Jews',
            url: url
          }).catch((error) => {
            console.log('Share cancelled or failed:', error);
            // If user cancels or share fails, fall back to clipboard copy
            copyToClipboard();
          });
        } else {
          // On desktop: copy to clipboard
          copyToClipboard();
        }
        
        function copyToClipboard() {
          navigator.clipboard.writeText(url).then(() => {
            // Show success state
            button.innerHTML = `
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
              </svg>
              Copied!
            `;
            button.className = 'inline-flex items-center justify-center px-6 py-3 bg-green-100 hover:bg-green-200 dark:bg-green-900 dark:hover:bg-green-800 text-green-700 dark:text-green-300 font-semibold rounded-lg transition-colors border border-green-200 dark:border-green-600';
            
            // Reset after 2 seconds
            setTimeout(() => {
              button.innerHTML = originalText;
              button.className = originalClasses;
            }, 2000);
          }).catch((error) => {
            console.error('Failed to copy to clipboard:', error);
            // Fallback for older browsers
            fallbackCopy();
          });
        }
        
        function fallbackCopy() {
          // Create temporary textarea for older browsers
          const textArea = document.createElement('textarea');
          textArea.value = url;
          textArea.style.position = 'fixed';
          textArea.style.left = '-999999px';
          textArea.style.top = '-999999px';
          document.body.appendChild(textArea);
          textArea.focus();
          textArea.select();
          
          try {
            document.execCommand('copy');
            // Show success state
            button.innerHTML = `
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
              </svg>
              Copied!
            `;
            button.className = 'inline-flex items-center justify-center px-6 py-3 bg-green-100 hover:bg-green-200 dark:bg-green-900 dark:hover:bg-green-800 text-green-700 dark:text-green-300 font-semibold rounded-lg transition-colors border border-green-200 dark:border-green-600';
            
            setTimeout(() => {
              button.innerHTML = originalText;
              button.className = originalClasses;
            }, 2000);
          } catch (error) {
            console.error('Fallback copy failed:', error);
            // Show error state
            button.innerHTML = `
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
              </svg>
              Failed
            `;
            button.className = 'inline-flex items-center justify-center px-6 py-3 bg-red-100 hover:bg-red-200 dark:bg-red-900 dark:hover:bg-red-800 text-red-700 dark:text-red-300 font-semibold rounded-lg transition-colors border border-red-200 dark:border-red-600';
            
            setTimeout(() => {
              button.innerHTML = originalText;
              button.className = originalClasses;
            }, 2000);
          } finally {
            document.body.removeChild(textArea);
          }
        }
      });
    });
  </script>
)} 